<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.trevor</groupId>
    <artifactId>trevor-cloud</artifactId>
    <version>1.0-SNAPSHOT</version>

    <packaging>pom</packaging>

    <modules>
        <module>common</module>
        <module>message</module>
        <module>auth</module>
        <module>eureka</module>
        <module>gateway</module>
        <module>general</module>
    </modules>


    <!--配置参数-->
    <properties>
        <java.version>1.8</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <spring-cloud.version>Greenwich.SR1</spring-cloud.version>
        <spring-boot.version>2.1.6.RELEASE</spring-boot.version>
        <mysql.version>5.1.41</mysql.version>
        <mybatis.version>2.0.0</mybatis.version>
        <lombok.version>1.16.18</lombok.version>
        <fastjson.version>1.2.83</fastjson.version>
        <guava.version>21.0</guava.version>
        <alibaba.druid>1.0.15</alibaba.druid>
        <common.io.version>2.4</common.io.version>
        <okhttp.version>3.2.0</okhttp.version>
        <jsonwebtoken.version>0.7.0</jsonwebtoken.version>
        <springfox-swagger-ui.version>2.6.1</springfox-swagger-ui.version>
        <springfox-swagger2.version>2.6.1</springfox-swagger2.version>
    </properties>

    <!--

    如果父pom中使用的是
    <dependencies>....</dependencies>
    的方式，则子pom会自动使用pom中的jar包

    -->
    <!-- 子pom不会自动使用父pom中的jar包，这时如果子pom想使用的话，就要给出groupId和artifactId，无需给出version -->
    <dependencyManagement>
        <dependencies>
            <!-- 定义 spring cloud 版本 -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- 定义 spring boot 版本 -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- 定义 mysql 版本 -->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${mysql.version}</version>
            </dependency>
            <!-- 定义 mybatis 版本 -->
            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
                <version>${mybatis.version}</version>
            </dependency>
            <!-- 定义 lombok 版本 -->
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
            </dependency>

            <!-- 定义 fastjson 版本 -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>
                <version>${fastjson.version}</version>
            </dependency>

            <!-- 定义 guave 版本 -->
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>${guava.version}</version>
            </dependency>

            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid</artifactId>
                <version>${alibaba.druid}</version>
            </dependency>

            <dependency>
                <groupId>commons-io</groupId>
                <artifactId>commons-io</artifactId>
                <version>${common.io.version}</version>
            </dependency>

            <dependency>
                <groupId>com.squareup.okhttp3</groupId>
                <artifactId>okhttp</artifactId>
                <version>${okhttp.version}</version>
            </dependency>

            <dependency>
                <groupId>io.jsonwebtoken</groupId>
                <artifactId>jjwt</artifactId>
                <version>${jsonwebtoken.version}</version>
                <scope>compile</scope>
            </dependency>

            <dependency>
                <groupId>io.springfox</groupId>
                <artifactId>springfox-swagger-ui</artifactId>
                <version>${springfox-swagger-ui.version}</version>
            </dependency>

            <dependency>
                <groupId>io.springfox</groupId>
                <artifactId>springfox-swagger2</artifactId>
                <version>${springfox-swagger2.version}</version>
            </dependency>

        </dependencies>
    </dependencyManagement>


    <!--
    一）在父模块1中将整个项目clean>compile>package>install 一遍。
    二）在父模块中的pom中的build插件注释掉。
    三）单独对common模块进行clean>compile>package>install
    四）将父模块中的pom中的build插件放开。
    五）重新单独对子模块2 进行编译，就不会报错了。

    原因可能是被引用的模块如果采用springboot插件打包会将相关依赖包打进去，然后其他调用的模块也有相关的依赖包，会有冲突。

    -->

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>2.1.6.RELEASE</version>
            </plugin>
            <!--<plugin>-->
                <!--<groupId>org.apache.maven.plugins</groupId>-->
                <!--<artifactId>maven-compiler-plugin</artifactId>-->
                <!--<version>3.1</version>-->
                <!--<configuration>-->
                    <!--<source>${java.version}</source>-->
                    <!--<target>${java.version}</target>-->
                    <!--<encoding>${project.build.sourceEncoding}</encoding>-->
                <!--</configuration>-->
            <!--</plugin>-->
        </plugins>
    </build>




</project>
